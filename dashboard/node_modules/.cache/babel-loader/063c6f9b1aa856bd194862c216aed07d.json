{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Aljamea Nairobi\\\\Desktop\\\\AMala\\\\Jamea Transport\\\\dashboard\\\\src\\\\components\\\\BarChart.jsx\";\nimport React from \"react\";\nimport { ResponsiveBar } from '@nivo/bar';\nimport { mockBarData as data } from \"../data/mockData\";\nvar BarChart = function BarChart(_ref) {\n  var data = _ref.data;\n  return /*#__PURE__*/React.createElement(ResponsiveBar, {\n    data: data,\n    keys: ['hot dog', 'burger', 'sandwich', 'kebab', 'fries', 'donut'],\n    indexBy: \"country\",\n    margin: {\n      top: 50,\n      right: 130,\n      bottom: 50,\n      left: 60\n    },\n    padding: 0.3,\n    valueScale: {\n      type: 'linear'\n    },\n    indexScale: {\n      type: 'band',\n      round: true\n    },\n    colors: {\n      scheme: 'nivo'\n    },\n    defs: [{\n      id: 'dots',\n      type: 'patternDots',\n      background: 'inherit',\n      color: '#38bcb2',\n      size: 4,\n      padding: 1,\n      stagger: true\n    }, {\n      id: 'lines',\n      type: 'patternLines',\n      background: 'inherit',\n      color: '#eed312',\n      rotation: -45,\n      lineWidth: 6,\n      spacing: 10\n    }],\n    fill: [{\n      match: {\n        id: 'fries'\n      },\n      id: 'dots'\n    }, {\n      match: {\n        id: 'sandwich'\n      },\n      id: 'lines'\n    }],\n    borderColor: {\n      from: 'color',\n      modifiers: [['darker', 1.6]]\n    },\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'country',\n      legendPosition: 'middle',\n      legendOffset: 32\n    },\n    axisLeft: {\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'food',\n      legendPosition: 'middle',\n      legendOffset: -40\n    },\n    labelSkipWidth: 12,\n    labelSkipHeight: 12,\n    labelTextColor: {\n      from: 'color',\n      modifiers: [['darker', 1.6]]\n    },\n    legends: [{\n      dataFrom: 'keys',\n      anchor: 'bottom-right',\n      direction: 'column',\n      justify: false,\n      translateX: 120,\n      translateY: 0,\n      itemsSpacing: 2,\n      itemWidth: 100,\n      itemHeight: 20,\n      itemDirection: 'left-to-right',\n      itemOpacity: 0.85,\n      symbolSize: 20,\n      effects: [{\n        on: 'hover',\n        style: {\n          itemOpacity: 1\n        }\n      }]\n    }],\n    role: \"application\",\n    ariaLabel: \"Nivo bar chart demo\",\n    barAriaLabel: function barAriaLabel(e) {\n      return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  });\n};\nexport default BarChart;\n\n// import { useTheme } from \"@mui/material\";\n// import { ResponsiveBar } from \"@nivo/bar\";\n// import { tokens } from \"../theme\";\n// import { mockBarData as data } from \"../data/mockData\";\n\n// const BarChart = ({ isDashboard = false }) => {\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n\n//   return (\n//     <ResponsiveBar\n//       data={data}\n//       theme={{\n//         // added\n//         axis: {\n//           domain: {\n//             line: {\n//               stroke: colors.grey[100],\n//             },\n//           },\n//           legend: {\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//           ticks: {\n//             line: {\n//               stroke: colors.grey[100],\n//               strokeWidth: 1,\n//             },\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//         },\n//         legends: {\n//           text: {\n//             fill: colors.grey[100],\n//           },\n//         },\n//       }}\n//       keys={[\"hot dog\", \"burger\", \"sandwich\", \"kebab\", \"fries\", \"donut\"]}\n//       indexBy=\"country\"\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n//       padding={0.3}\n//       valueScale={{ type: \"linear\" }}\n//       indexScale={{ type: \"band\", round: true }}\n//       colors={{ scheme: \"nivo\" }}\n//       defs={[\n//         {\n//           id: \"dots\",\n//           type: \"patternDots\",\n//           background: \"inherit\",\n//           color: \"#38bcb2\",\n//           size: 4,\n//           padding: 1,\n//           stagger: true,\n//         },\n//         {\n//           id: \"lines\",\n//           type: \"patternLines\",\n//           background: \"inherit\",\n//           color: \"#eed312\",\n//           rotation: -45,\n//           lineWidth: 6,\n//           spacing: 10,\n//         },\n//       ]}\n//       borderColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", \"1.6\"]],\n//       }}\n//       axisTop={null}\n//       axisRight={null}\n//       axisBottom={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"country\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: 32,\n//       }}\n//       axisLeft={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"food\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: -40,\n//       }}\n//       enableLabel={false}\n//       labelSkipWidth={12}\n//       labelSkipHeight={12}\n//       labelTextColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", 1.6]],\n//       }}\n//       legends={[\n//         {\n//           dataFrom: \"keys\",\n//           anchor: \"bottom-right\",\n//           direction: \"column\",\n//           justify: false,\n//           translateX: 120,\n//           translateY: 0,\n//           itemsSpacing: 2,\n//           itemWidth: 100,\n//           itemHeight: 20,\n//           itemDirection: \"left-to-right\",\n//           itemOpacity: 0.85,\n//           symbolSize: 20,\n//           effects: [\n//             {\n//               on: \"hover\",\n//               style: {\n//                 itemOpacity: 1,\n//               },\n//             },\n//           ],\n//         },\n//       ]}\n//       role=\"application\"\n//       barAriaLabel={function (e) {\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\n//       }}\n//     />\n//   );\n// };\n\n// export default BarChart;","map":{"version":3,"names":["React","ResponsiveBar","mockBarData","data","BarChart","top","right","bottom","left","type","round","scheme","id","background","color","size","padding","stagger","rotation","lineWidth","spacing","match","from","modifiers","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","e","formattedValue","indexValue"],"sources":["C:/Users/Aljamea Nairobi/Desktop/AMala/Jamea Transport/dashboard/src/components/BarChart.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { ResponsiveBar } from '@nivo/bar'\r\n\r\n\r\nimport { mockBarData as data } from \"../data/mockData\";\r\n\r\nconst BarChart = ({ data /* see data tab */ }) => (\r\n    <ResponsiveBar\r\n        data={data}\r\n        keys={[\r\n            'hot dog',\r\n            'burger',\r\n            'sandwich',\r\n            'kebab',\r\n            'fries',\r\n            'donut'\r\n        ]}\r\n        indexBy=\"country\"\r\n        margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n        padding={0.3}\r\n        valueScale={{ type: 'linear' }}\r\n        indexScale={{ type: 'band', round: true }}\r\n        colors={{ scheme: 'nivo' }}\r\n        defs={[\r\n            {\r\n                id: 'dots',\r\n                type: 'patternDots',\r\n                background: 'inherit',\r\n                color: '#38bcb2',\r\n                size: 4,\r\n                padding: 1,\r\n                stagger: true\r\n            },\r\n            {\r\n                id: 'lines',\r\n                type: 'patternLines',\r\n                background: 'inherit',\r\n                color: '#eed312',\r\n                rotation: -45,\r\n                lineWidth: 6,\r\n                spacing: 10\r\n            }\r\n        ]}\r\n        fill={[\r\n            {\r\n                match: {\r\n                    id: 'fries'\r\n                },\r\n                id: 'dots'\r\n            },\r\n            {\r\n                match: {\r\n                    id: 'sandwich'\r\n                },\r\n                id: 'lines'\r\n            }\r\n        ]}\r\n        borderColor={{\r\n            from: 'color',\r\n            modifiers: [\r\n                [\r\n                    'darker',\r\n                    1.6\r\n                ]\r\n            ]\r\n        }}\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'country',\r\n            legendPosition: 'middle',\r\n            legendOffset: 32\r\n        }}\r\n        axisLeft={{\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'food',\r\n            legendPosition: 'middle',\r\n            legendOffset: -40\r\n        }}\r\n        labelSkipWidth={12}\r\n        labelSkipHeight={12}\r\n        labelTextColor={{\r\n            from: 'color',\r\n            modifiers: [\r\n                [\r\n                    'darker',\r\n                    1.6\r\n                ]\r\n            ]\r\n        }}\r\n        legends={[\r\n            {\r\n                dataFrom: 'keys',\r\n                anchor: 'bottom-right',\r\n                direction: 'column',\r\n                justify: false,\r\n                translateX: 120,\r\n                translateY: 0,\r\n                itemsSpacing: 2,\r\n                itemWidth: 100,\r\n                itemHeight: 20,\r\n                itemDirection: 'left-to-right',\r\n                itemOpacity: 0.85,\r\n                symbolSize: 20,\r\n                effects: [\r\n                    {\r\n                        on: 'hover',\r\n                        style: {\r\n                            itemOpacity: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]}\r\n        role=\"application\"\r\n        ariaLabel=\"Nivo bar chart demo\"\r\n        barAriaLabel={function(e){return e.id+\": \"+e.formattedValue+\" in country: \"+e.indexValue}}\r\n    />\r\n)\r\n\r\nexport default BarChart;\r\n\r\n\r\n// import { useTheme } from \"@mui/material\";\r\n// import { ResponsiveBar } from \"@nivo/bar\";\r\n// import { tokens } from \"../theme\";\r\n// import { mockBarData as data } from \"../data/mockData\";\r\n\r\n// const BarChart = ({ isDashboard = false }) => {\r\n//   const theme = useTheme();\r\n//   const colors = tokens(theme.palette.mode);\r\n\r\n//   return (\r\n//     <ResponsiveBar\r\n//       data={data}\r\n//       theme={{\r\n//         // added\r\n//         axis: {\r\n//           domain: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//             },\r\n//           },\r\n//           legend: {\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//           ticks: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//               strokeWidth: 1,\r\n//             },\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//         },\r\n//         legends: {\r\n//           text: {\r\n//             fill: colors.grey[100],\r\n//           },\r\n//         },\r\n//       }}\r\n//       keys={[\"hot dog\", \"burger\", \"sandwich\", \"kebab\", \"fries\", \"donut\"]}\r\n//       indexBy=\"country\"\r\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n//       padding={0.3}\r\n//       valueScale={{ type: \"linear\" }}\r\n//       indexScale={{ type: \"band\", round: true }}\r\n//       colors={{ scheme: \"nivo\" }}\r\n//       defs={[\r\n//         {\r\n//           id: \"dots\",\r\n//           type: \"patternDots\",\r\n//           background: \"inherit\",\r\n//           color: \"#38bcb2\",\r\n//           size: 4,\r\n//           padding: 1,\r\n//           stagger: true,\r\n//         },\r\n//         {\r\n//           id: \"lines\",\r\n//           type: \"patternLines\",\r\n//           background: \"inherit\",\r\n//           color: \"#eed312\",\r\n//           rotation: -45,\r\n//           lineWidth: 6,\r\n//           spacing: 10,\r\n//         },\r\n//       ]}\r\n//       borderColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", \"1.6\"]],\r\n//       }}\r\n//       axisTop={null}\r\n//       axisRight={null}\r\n//       axisBottom={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: isDashboard ? undefined : \"country\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: 32,\r\n//       }}\r\n//       axisLeft={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: isDashboard ? undefined : \"food\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: -40,\r\n//       }}\r\n//       enableLabel={false}\r\n//       labelSkipWidth={12}\r\n//       labelSkipHeight={12}\r\n//       labelTextColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", 1.6]],\r\n//       }}\r\n//       legends={[\r\n//         {\r\n//           dataFrom: \"keys\",\r\n//           anchor: \"bottom-right\",\r\n//           direction: \"column\",\r\n//           justify: false,\r\n//           translateX: 120,\r\n//           translateY: 0,\r\n//           itemsSpacing: 2,\r\n//           itemWidth: 100,\r\n//           itemHeight: 20,\r\n//           itemDirection: \"left-to-right\",\r\n//           itemOpacity: 0.85,\r\n//           symbolSize: 20,\r\n//           effects: [\r\n//             {\r\n//               on: \"hover\",\r\n//               style: {\r\n//                 itemOpacity: 1,\r\n//               },\r\n//             },\r\n//           ],\r\n//         },\r\n//       ]}\r\n//       role=\"application\"\r\n//       barAriaLabel={function (e) {\r\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\r\n//       }}\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default BarChart;"],"mappings":"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},"metadata":{},"sourceType":"module"}